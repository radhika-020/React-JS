React was first released in the year 2013.
This was originally created by Jordan Walke.
This is maintained by Facebook.
Powers thousands of mobile apps, including enterprise apps.

These two lines are used to add react into the html file :-
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> :- react, This will include the react library into the file.
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> :- react-dom, This will include the react-dom library into the file.
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script> :- This can be included in the html file by writing type = "text/babel" inside the script tab. This is used to add JavaScript XML (JSX) in the html file.

ReactDOM.render() allows us to render something that looks very like HTML. This mainly consists of two arguments/parameter inside the render function (render function is used for displaying the code on teh screen). First argument/parameter is the HTML tag that you want to render on the screen or display on the screen and the second one will be where you want to render, for say, inside a div element in the HTML file with id root then in that case we will write this as :-
ReactDOM.render(<h1>Hello, Everyone!</h1>, document.getElementById("root"))
For selecting a query, we write document.querySelector("#root")
React is composable, which means that it can be broken down into various different components and comprised in one js file.
For example,
function mainComponent (
  return <h1>Hello!</h1>
)

ReactDOM.render(<mainComponent/>, document.getElementById("root"))

React is Declarative, which means, only tell the system what to do and rest will be figured out by React itself, which is opposite to the concept of Imperative, which requires the system to tell each and every step that needs to be done.

ReactDOM.render(<h1>Hello, Everyone!</h1>, document.getElementById("root")) :- The same thing can be done in vanilla JS as :-
const h1 = document.createElement("h1")
h1.textContent = "Hello, Everyone!"
h1.className = "header"
document.getElementById("root").append(h1)

Now, removing the hard coded script tags for including react and reaact DOM in oyr project, we will now use the react dependencies (version 18, the latest one). For that, all we have to do is :-
import React from "react"
import ReactDOM from "react-dom/client"

Now, here, instead of the render function, we have to use createRoot element. For say :-
ReactDOM.createRoot(document.getElementById("root")).render(<h1>Hello</h1>)
This can also be written as :-
const root = ReactDOM.createRoot(document.getElementById("root")
root.render(<h1>Hello</h1>)

1) JSX :-
  a) JSX is a syntax extension to JavaScript. It is used with React to describe what the User Interface should look like.
  b) By using JSX, you can write HTML structures in the same file that contains JavaScript code.
  c) JsX helps in making the code easier to understand and debug as it avoids usage of JS DOM structures which are rather complex.
  d) This is a JavaScript with a mix of HTML inside it.
  e) JSX inside the ReactDOM.render() allows only one parent element, for example :-
    ReactDOM.render(<h1>This is JSX</h1>, document.getElementById("root"))
    Writing with two sibling elements, for example :-
      ReactDOM.render(<h1>Hello, Everyone!</h1><p>This is a paragraph</p>, document.getElementById("root")) :- This will give us an Unknown Error in the browser. This can be rewritten in the correct format as :-
        ReactDOM.render(
        <div>
          <h1>Hello, Everyone!</h1>
          <p>This is a paragraph. </p>
        </div>, 
        document.getElementById("root"))
        Now, the above line contains only one parent element, div, and more than one children elements(h1 and p).
        This can also be written as :-
          const page = (
          <div>
            <h1>Hello, Everyone!</h1>
            <p>This is a paragraph. </p>
          </div>
          )
          ReactDOM.render(page, getElementById("root"))
  f) Since, we know that JSX must have only one parent elemnt, but can have multiple children inside it, so that can also be written as :-
    const page = (
      <>
        <h1>Hello</h1>
        <p>This is Radhika</p>
      </> 
    )
  These empty opening and closing tags are called as fragments.


2) Virtual DOM :-
  a) React keeps a lightweight representation of the Real DOM in the memory, and that is known as the VIrtual DOM.
  b) Manipulating Real DOM is much slower than manipulating virtual DOM, because nothing gets drawn onscreen.
  c) When the state of an object changes, Virtual DOM changes only that object in the Real DOM instead of updating all the objects.
  
  
3) React Extensions :-
  a) React goes beyond simple UI and has many extensions for complete application architecture support.
  b) It provides server-side rendering.
  c) Supports mobile app development.
  d) Extended with Flux and Redux, among others.
  Some of the extensions that can be mentioned here are :-
    i) Flux :- It is the application architecture that Facebook uses for building web applications.
    ii) React Native :- It lets you build mobile apps using only JavaScript.
    
    
4) Event in React :-
  a) An event is an action that can be triggered by a User or any System event like pressing a key, a mouse click, etc.
  b) It can be created as follows :-
  create Simple extends React.Component {
    work() {
      alert("Good work!");
   }
   render() {
    return (
      <button onClick={this.work}>Do some work!</button>
    );
   }
  }
  
  
5) Components in ReactJS :-
    a) Components are the building blocks of any React application, and a single app usually consists of multiple components.
    b) It splits the UI into independent, reusable pieces that can be processed seperately.
    c) A component is essentially a piece of the UI.
    For example,
    import React, {Component} from 'react';
    
    export defaultt class MainApp extends Component {
      render() {
        return (
          <div>
            <p>Welcome!</p>
          </div>
         )
       }
      }
    
    
6) State in React :-
    a) A state in object that stores the values of properties belonging to a component that could change over a period of time.
    b) a state can be modified based on the user action or network changes.
    c) Every time the state of an object chnages, React re-renders the component to the browser.
    d) The state object can store multiple properies.
    e) this.setState() is used to change the value of tyhe state object.
    f) setState() function performs a shallow merge between the new and the previous state.
    g) A sate holdss the data that a component renders on the webpage.
    For example,
    import React from 'react';
    
    class App extends React.Component {
      constructor(props) {
        super(props);
        
        this.state = {
        car : "1600 cc", 
        bike : "150 cc"
        }
       }
      render() {
        return ( 
          <div>
            <h1>{this.state.car}</h1>
            <h2>{this.state.bike}</h2>
          </div>
         );
       }
      }
  
7) Higher Order Components :- It is a function that takes a component and returns a new component. It facilitates resuing of component logic. It is just like a JS Function that is used to add additional functionalities to the existing Components. For example,
    const NewComponent = higherOrderComponent(originalComponent)
    
   Pure Components :- React Component is the base class for React components. React.PureComponent is a variation of React.Component class and does a shallow comparison of props and state. A state component can be considereed pure if it renders the same output for the same state and props.
   Shallow Comparsion :- This checks for equality. In case of scalar attributes, it only compares their values and in case of objects, it only compares their references. 
   
8) event in React :-
    import React, {Component} from 'react';
    
    export defaultt class MainApp extends Component {
      callapp() {
        alert("App is called")
      }
      render() {
        return (
          <div>
            <p>Welcome!</p>
            <button onClick = {this.callapp}>Call.</button>
          </div>
         )
       }
      }
      
Creating Custom Components :-
function temporaryName(){
  return 
    <h1>Hello!</h1>
  }
  
ReactDOM.render(temporaryName(), document.getElementById("root"))
#This wprks same as rendering HTML directly in ReactDOM or rendering HTML using a const element. This use or making of own functions for rendering is called as Custom Components.
#Always use Pascal Case for naimg convention of the functions.
function TemporaryName(){
  return 
    <h1>Hello!</h1>
  }
  
ReactDOM.render(<temporaryName/>, document.getElementById("root"))
React Components are the react elements that the user can see (UI).
Rendering one component into another :
function Header(){
  return (
    <header>
      <nav><img src="" width = "40px"/>
      </nav<
    /header>
  )
  }
  
 function MainContent(){
 return(
    <Header/>
    <ol>Wo laude jaisa hai lekin fir bhi mujhe pasand hai.</ol>
 )
 }
 
 ReactDOM.render(<MainContent/>, document.getElementByID("root"))
 
 Adding className to add CSS in the elements :-
 function Header(){
  return (
    <header className = "header">
      <nav className = "nav"><img src="" width = "40px"/>
      </nav<
    /header>
  )
  }
  
  Exporting Components from other fikes :-
  
  #Header.js
  import React from "react"
  import ReactDom from "react-dom"
  
  export default function Header (){
    return(
      <h1>Hello!</h1>
    )
  }
  
  We can either export our Component by the above way or the other is mentioned below :-
  import React from "react"
  import ReactDom from "react-dom"
  
 function Header(){
    return(
      <h1>Hello!</h1>
    )
  }
  export default Header
  
  
  Importing this into our main file, index.js :-
  import React from "react
  import ReactDOM from "react-dom"
  import Header from "./Header" === ./ symbol signifies that Header.js file is present in our working directory or folder and we are not importing any default library or dependency.
  
  function MainContent () {
    return (
      <Header/>
    )
  }
  
  ReactDOM.render(<MainContent/>, document.getElementByID("root"))
  
  Using Vite which is a tool to create a local React App.
  To check the version of node,
  node -v
  To check the version of npm,
  npm -v
  
  npm create vite@latest
  Project name: vite-react-radhika
  Select a framework: react
  Select a variant: react / JavaScript
  Running three commands afterwards, 
  cd vite-react-radhika
  npm install
  npm run dev
  Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects.
